from aiogram import Router, F
from aiogram.types import Message

from bot.keyboards import main_keyboard
from libs.api_client import get_mentors
from bot.utils import get_url, validate_api_response


start_router = Router()

BASE_URL = get_url()
SCHEMA_FILE = "libs/schema.json"


@start_router.message(F.text == "/start")
async def start_handler(message: Message):
    username = message.from_user.username
    chat_id = message.chat.id

    try:
        mentors_response = validate_api_response(get_mentors(BASE_URL, SCHEMA_FILE), "üö® –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    except ValueError as e:
        await message.answer(str(e))
        return

    mentors = mentors_response.get("mentors", [])

    mentor = next((m for m in mentors if m["tg_chat_id"] == chat_id), None)

    role = "–ú–µ–Ω—Ç–æ—Ä" if mentor else "–£—á–µ–Ω–∏–∫"
    name = mentor["name"]["first"] if mentor else username
    action = "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è" if mentor else "–ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞"

    text = (
        f"üéâ –ü—Ä–∏–≤–µ—Ç, {role} {name}! üéâ\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ–Ω—Ç–æ—Ä—É ‚ù§Ô∏è\n\n"
        f"‚ú® –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–ö–†–´–¢–ö–£', —á—Ç–æ–±—ã {action}! ‚ú®"
    )

    await message.answer(text, reply_markup=main_keyboard)
